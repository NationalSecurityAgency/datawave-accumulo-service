name: Tests

on:
  push:
    paths-ignore: ['*.md', 'CODEOWNERS', 'LICENSE']
    branches:
    - 'main'
    - 'release/*'
  pull_request:
    paths-ignore: ['*.md', 'CODEOWNERS', 'LICENSE']

env:
  JAVA_VERSION: '11'
  JAVA_DISTRIBUTION: 'zulu' #This is the default on v1 of the action
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Djava.awt.headless=true"

jobs:
  # Runs the pom sorter and code formatter to ensure that the code
  # is formatted and poms are sorted according to project rules. This
  # will fail if the formatter makes any changes.
  check-code-formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'maven'
      - name: Format code
        run: |
          mvn -V -B -e clean formatter:format sortpom:sort -Pautoformat
          git status
          git diff-index --quiet HEAD || (echo "Error! There are modified files after formatting." && false)
  # Build the code and run the unit/integration tests.
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: 'maven'
    - name: Build and Run Unit Tests
      run: mvn -V -B -e -Ddist clean verify

    # Here's an example of how you'd deploy the image to the github package registry.
    # We don't want to do this by default since packages on github cannot be deleted
    # or overwritten. So this could only be done for tags, however it seems the quickstart
    # image may also exceed the maximum size allowed by github.
    # - name: Image
    #   env:
    #     IMAGE_REGISTRY: "docker.pkg.github.com"
    #     IMAGE_USERNAME: "NationalSecurityAgency"
    #   run: |
    #     # Set up env vars
    #     IMAGE_NAME=$(mvn -q -N -Pdocker -f service/pom.xml -Dexec.executable='echo' -Dexec.args='${project.version}' exec:exec)
    #     IMAGE_PREFIX=$(mvn -q -N -Pdocker -f service/pom.xml -Dexec.executable='echo' -Dexec.args='${docker.image.prefix}' exec:exec)
    #     IMAGE_TAG=$(mvn -q -N -Pdocker -f service/pom.xml -Dexec.executable='echo' -Dexec.args='${project.artifactId}' exec:exec)
    #     REMOTE_IMAGE_NAME="${IMAGE_REGISTRY}/${IMAGE_USERNAME}/${IMAGE_PREFIX}${IMAGE_NAME}"
    #     # Log in to the package registry
    #     echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com --username ${GITHUB_ACTOR} --password-stdin
    #     # Tag and push the image
    #     docker tag ${IMAGE_PREFIX}${IMAGE_NAME}:${IMAGE_TAG} ${REMOTE_IMAGE_NAME}:${IMAGE_TAG}
    #     docker push ${REMOTE_IMAGE_NAME}:${IMAGE_TAG}

